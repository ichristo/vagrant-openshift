== OpenShift Origin Build Tools

This is a link:http://www.vagrantup.com[Vagrant] 1.2+ plugin that adds command and provisioner to
build and test link:http://openshift.github.io[OpenShift Origin].

NOTE: This plugin requires Vagrant 1.2+

=== Features

* Compatible with VMs run via link:https://www.virtualbox.org[VirtualBox], link:https://github.com/mitchellh/vagrant-aws[AWS]
  or link:https://github.com/tknerr/vagrant-managed-servers[managed] providers.
* Provides commands to install build dependencies, sync repositories, and run tests

=== Installing

To work on the *vagrant-openshift* plugin, clone this repository out, and use
link:http://gembundler.com[Bundler] to get the dependencies:

[source, sh]
----
$ bundle
----

Compile an install the plugin using Rake

[source, sh]
----
$ rake install
----

Note: If you receive the following message:

[source, sh]
----
Vagrant's built-in bundler management mechanism is disabled because
Vagrant is running in an external bundler environment. In these
cases, plugin management does not work with Vagrant. To install
plugins, use your own Gemfile. To load plugins, either put the
plugins in the `plugins` group in your Gemfile or manually require
them in a Vagrantfile.
Now install the vagrant plugin
----

You can install the compiled gem via vagrant:

[source, sh]
----
$ $ vagrant plugin install pkg/vagrant-openshift 0.0.10.gem
----

=== Getting started

==== Clone the OpenShift Origin repositories

[source, sh]
----
$ vagrant origin-local-checkout <github username>
----

This will clone 3 repositores from your link:http://www.github.com[GitHub] account and link them against the upstream repositories.

.GitHub repositories
Make sure that you have fork of these repositories in your link:http://www.github.com[GitHub] account:

* link:http://github.com/openshift/rhc[Command line tools]
* link:http://github.com/openshift/origin-server[OpenShift Origin console, broker and node]
* link:http://github.com/openshift/puppet-openshift_origin[Puppet module for OpenShift Origin]

NOTE: Skip this step if building upstream code

==== Initialize the Vagrantfile

Create a Vagrantfile and customize it to match your requirements:

[source, sh]
----
$ vagrant origin-init 
----

.Command options:

* Specify which OS to build with:
** --os fedora		- Launch a Fedora 19 image
** --os rhel		- Launch a RHEL image (where available)
** --os centos		- Launch a CentOS image (where available)
* Build from bare installation of OS:
** --no-base

==== Start the machine

===== VirtualBox

Running with the default VirtualBox provider

[source, sh]
----
vagrant up
----

===== AWS/EC2

* Install the latest vagrant-aws plugin. Follow the link:https://github.com/mitchellh/vagrant-aws/blob/master/README.md#development[build steps].

* Edit the Vagrantfile and update your EC2 credentials.

----
aws.access_key_id = "<API KEY>"
aws.secret_access_key = "<API SECRET>"
aws.keypair_name = "<SSH KEY NAME>"
override.ssh.private_key_path = "<PRIVATE KEY FILE>"
----

* Start the AWS machine

[source, sh]
----
vagrant up --provider=aws
----

NOTE: Requires latest link:https://github.com/mitchellh/vagrant-aws[AWS] provider.

NOTE: You can use the link:https://github.com/mikery/vagrant-ami[Vagrant-AMI] plugin to create an AMI from a running AWS machine.


===== LibVirt

* Install the vagrant-libvirt plugin dependencies

[source, sh]
----
yum install libxslt-devel libxml2-devel libvirt-devel
----

* Install the vagrant-libvirt plugin

[source, sh]
----
vagrant plugin install vagrant-libvirt
----

* Configure LibVirt to allow remote TLS connections
** Create TLS certificates and key pairs. Follow the guide at http://libvirt.org/remote.html#Remote_certificates
Example commands for creating a self signed certificate are provided below.

.Example self-signed certificates
[source, sh]
----
mkdir -p /etc/pki/libvirt/private

#CA Cert
certtool --generate-privkey > cakey.pem

cat <<EOF> ca.info
cn = MyOrg
ca
cert_signing_key
EOF

certtool --generate-self-signed --load-privkey cakey.pem --template ca.info --outfile cacert.pem
/bin/cp -f cacert.pem /etc/pki/CA/cacert.pem

#Server cert
certtool --generate-privkey > serverkey.pem

cat <<EOF> server.info
organization = MyOrg
cn = oirase
tls_www_server
encryption_key
signing_key
EOF

certtool --generate-certificate --load-privkey serverkey.pem \
  --load-ca-certificate cacert.pem --load-ca-privkey cakey.pem \
  --template server.info --outfile servercert.pem
/bin/cp -f serverkey.pem /etc/pki/libvirt/private/serverkey.pem
/bin/cp -f servercert.pem /etc/pki/libvirt/servercert.pem

#Client cert
certtool --generate-privkey > clientkey.pem

cat <<EOF> client.info
country = US
state = California
locality = Mountain View
organization = MyOrg
cn = client1
tls_www_client
encryption_key
signing_key
EOF

certtool --generate-certificate --load-privkey clientkey.pem \
  --load-ca-certificate cacert.pem --load-ca-privkey cakey.pem \
  --template client.info --outfile clientcert.pem

/bin/cp -f clientkey.pem /etc/pki/libvirt/private/clientkey.pem
/bin/cp -f clientcert.pem /etc/pki/libvirt/clientcert.pem
----

** Modify /etc/sysconfig/libvirtd and enable listening to connections

----
LIBVIRTD_ARGS="--listen"
---- 

** Restart libvirtd

* Start the LibVirt machine

[source, sh] 
----
vagrant up --provider=libvirt
----

NOTE: Requires latest link:https://github.com/pradels/vagrant-libvirt[LibVirt] provider

===== Managed

Running on other environments which are not managed by Vagrant directly.

* Install the vagrant-managed-servers plugin

[source, sh]
----
vagrant plugin install vagrant-managed-servers
----

* Edit the Vagrantfile and update the managed section to update the IP address, User name and SSH key.

----
managed.server = "HOST or IP of machine"
override.ssh.username = "root"
override.ssh.private_key_path = "~/.ssh/id_rsa"
----

* Connect to the manually managed machine

[source, sh] 
----
vagrant up --provider=managed
----

NOTE: Requires latest link:https://github.com/tknerr/vagrant-managed-servers[Managed] provider


==== Install build dependencies

If starting from a bare OS image, install the build and package dependencies.

[source, sh]
----
$ vagrant origin-build-base
----

NOTE: It is a good idea to snapshot the VM after this step so that you don't have to redo this step every time.

==== Sync and Build OpenShift packages

* Perform initial sync from local repository clones and build packages

[source, sh]
----
$ vagrant sync --clean
----

NOTE: This will `rsync` every git repo in your working directory to your origin machine.  If you have multiple unrelated 
projects in the same directory, you can create a special working directory to run `sync` and populate it with symbolic links
to your local clones.

* Syncing and building code from local repository clones

[source, sh]
----
$ vagrant sync
----

* Syncing and building code from upstream repositories

[source, sh]
----
$ vagrant sync --upstream
----

==== Running OpenShift Origin Tests

.Running basic tests
[source, sh]
----
$ vagrant test --all
----

.Running extended tests
----
$ vagrant origin-test --extended --all
----

== Other Notes

=== Developer environment

To enable easy customization of the build environment, any files placed under '\~/.openshiftdev/home.d' will be copied to
the vagrant user home directory. For example: '~/.openshiftdev/home.d/.bash_profile' will be copied to '.bash_profile'
on the vagrant VM.

=== AWS Credentials

Rather than have to add AWS credentials every time the Vagrantfile is created using origin-init command, you can
specify your credentials in the '~/.awscreds' file and it will be automatically added to the Vagrantfile.

Example:

.'~/.awscreds'
----
AWSAccessKeyId=<AWS API Key>
AWSSecretKey=<AWS API Secret>
AWSKeyPair=<Keypair name>
AWSPrivateKeyPath=<SSH Private key>
----


== Notice of Export Control Law

This software distribution includes cryptographic software that is subject to the U.S. Export Administration Regulations (the "*EAR*") and other U.S. and foreign laws and may not be exported, re-exported or transferred (a) to any country listed in Country Group E:1 in Supplement No. 1 to part 740 of the EAR (currently, Cuba, Iran, North Korea, Sudan & Syria); (b) to any prohibited destination or to any end user who has been prohibited from participating in U.S. export transactions by any federal agency of the U.S. government; or (c) for use in connection with the design, development or production of nuclear, chemical or biological weapons, or rocket systems, space launch vehicles, or sounding rockets, or unmanned air vehicle systems.You may not download this software or technical information if you are located in one of these countries or otherwise subject to these restrictions. You may not provide this software or technical information to individuals or entities located in one of these countries or otherwise subject to these restrictions. You are also responsible for compliance with foreign law requirements applicable to the import, export and use of this software and technical information.
